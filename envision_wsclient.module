<?php

/**
 * @file
 * Web service client examples module.
 */

/**
 * Implements hook_commerce_checkout_page_info().
 */
function envision_wsclient_commerce_checkout_page_info() {
  $checkout_pages = array();

  $checkout_pages['checkout_to_webservice'] = array(
    'name' => t('checkout to webservice'),
    'title' => t('Connect to remote server'),
    'weight' => 4,
    'buttons' => TRUE,
  );
  
  $checkout_pages['input_vapp_name'] = array(
    'name' => t('Confirm Virtual Application Name'),
    'title' => t('Confirm Virtual Application Name'),
    'weight' => 3,
    'buttons' => TRUE,
  );

  return $checkout_pages;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function envision_wsclient_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['envision_wsclient'] = array(
    'title' => t('Envision WSClient'),
    'base' => 'envision_wsclient_pane',
    'file' => 'includes/envision_wsclient.checkout_pane.inc',
    'page' => 'checkout_to_webservice',
    'weight' => 3,
    'review' => FALSE,
  );
  
  $checkout_panes['input_vapp_name_pane'] = array(
    'title' => t('Virtual Application Item List'),
    'base' => 'envision_wsclient_input_vapp_pane',
    'file' => 'includes/envision_wsclient.input_vapp_name.inc',
    'page' => 'input_vapp_name',
    'weight' => 2,
    'review' => FALSE,
  );

  return $checkout_panes;
}


/**
 * Implements hook_menu(). 
 * for testing
 */
function envision_wsclient_menu() {
  $items['test/restful'] = array(
    'page callback' => 'exec_wsclient',
    'file' => 'envision_wsclient.test.inc',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_default_wsclient_service().
 */
function envision_wsclient_default_wsclient_service() {

  $service = new WSClientServiceDescription();
  $service->name = 'envision_webservice';
  $service->label = 'Envision Webservice';
  $service->url = 'http://218.4.19.204:8081/envision/restful/';
  $service->type = 'rest';

  // Add info about the REST service, which the user has to provide via the UI.
  $service->datatypes = array(
    'return_result' => array(
      'label' => 'Return Result',
      'property info' => array(
        'responseData' => array(
          'type' => 'text',
          'label' => 'Return Result'
        ),
      ),
    ),
  );
  
  //create operation
  $operation['label'] = 'Create';
  $operation['url'] = 'createvApp';
  $operation['parameter']['serviceName'] = array('type' => 'text', 'label' => 'ServiceName');
  $operation['parameter']['hireDays'] = array('type' => 'text', 'label' => 'hireDays');
  $operation['parameter']['templateName'] = array('type' => 'text', 'label' => 'templateName');
  $operation['type']='POST';
  $service->operations['create'] = $operation;
  
  //delete by name operation
  $operation = array();
  $operation['label'] = 'DeleteByName';
  $operation['url'] = 'deletevAppByName';
  $operation['parameter']['serviceName'] = array('type' => 'text', 'label' => 'ServiceName');
  $operation['type']='POST';
  $service->operations['delete_by_name'] = $operation;
  
  //delete by id operation
  $operation = array();
  $operation['label'] = 'DeleteById';
  $operation['url'] = 'deletevAppById';
  $operation['parameter']['vappId'] = array('type' => 'text', 'label' => 'vappId');
  $operation['type']='POST';
  $service->operations['delete_by_id'] = $operation;
  
  //deploy by id operation
  $operation = array();
  $operation['label'] = 'DeployById';
  $operation['url'] = 'deployvAppById';
  $operation['parameter']['vappId'] = array('type' => 'text', 'label' => 'vappId');
  $operation['parameter']['action'] = array('type' => 'text', 'label' => 'Action');
  $operation['type']='POST';
  $service->operations['deploy_by_id'] = $operation;
  
  //power by id operation
  $operation = array();
  $operation['label'] = 'PowerById';
  $operation['url'] = 'powervAppById';
  $operation['parameter']['vappId'] = array('type' => 'text', 'label' => 'vappId');
  $operation['parameter']['action'] = array('type' => 'text', 'label' => 'Action');
  $operation['type']='POST';
  $service->operations['power_by_id'] = $operation;
  
  //find by id operation
  $operation = array();
  $operation['label'] = 'FindById';
  $operation['url'] = 'findvAppById';
  $operation['parameter']['vappId'] = array('type' => 'text', 'label' => 'vappId');
  $operation['type']='POST';
  $service->operations['find_by_id'] = $operation;
  
  //Asynchronous Create vApp
  $operation = array();
  $operation['label'] = 'AsyncCreatevApp';
  $operation['url'] = 'asyncCreatevApp';
  $operation['parameter']['serviceName'] = array('type' => 'text', 'label' => 'ServiceName');
  $operation['parameter']['hireDays'] = array('type' => 'text', 'label' => 'hireDays');
  $operation['parameter']['templateName'] = array('type' => 'text', 'label' => 'templateName');
  $operation['type']='POST';
  $service->operations['async_create'] = $operation;
  
  //Asynchronous Track task by task ID
  $operation = array();
  $operation['label'] = 'TrackTaskById';
  $operation['url'] = 'trackTaskById';
  $operation['parameter']['taskId'] = array('type' => 'text', 'label' => 'Task ID');
  $operation['type']='POST';
  $service->operations['track_by_id'] = $operation;
  

  $services[$service->name] = $service;
  
  return $services;
}


/**
 * Implements hook_node_delete().
 */
function envision_wsclient_node_delete($node) {
  if($node->type=='running_service'){
    $service = wsclient_service_load('envision_webservice');
    try {
      $result = $service->delete_by_name($node->title);
    }catch (WSClientException $e) {
      drupal_set_message($e->__toString(),'error');
      $result = $e->__toString();
    }
    //dpm($result);
  }
}

/**
 * Implements hook_cron().
 */
function envision_wsclient_cron() {
  drupal_set_message('Hello:'.time());
}